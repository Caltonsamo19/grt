require('dotenv').config();
const { Client, LocalAuth } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const fs = require('fs').promises;
const fssync = require('fs');
const path = require('path');

// ===================================
// üîç BOT DETECTOR DE CONCORRENTES
// ===================================
// Monitora grupos e detecta quando vendedores concorrentes entram
// Notifica admins automaticamente

console.log('üöÄ Iniciando Bot Detector de Concorrentes...\n');

// === CONFIGURA√á√ïES ===
const ARQUIVO_CONCORRENTES = path.join(__dirname, 'competitors.json');
const ARQUIVO_LOGS = path.join(__dirname, 'detections-log.json');
const ARQUIVO_CONFIG = path.join(__dirname, 'bot-config.json');

// === DADOS EM MEM√ìRIA ===
let concorrentes = new Set(); // Lista de n√∫meros concorrentes
let deteccoesLog = []; // Hist√≥rico de detec√ß√µes
let config = {
    notificarAdmins: true,
    notificarGrupo: true,
    removerAutomatico: false,
    mensagemCustomizada: null
};

// === INICIALIZA√á√ÉO DO CLIENT ===
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: 'bot-detector',
        dataPath: './.wwebjs_detector'
    }),
    puppeteer: {
        headless: true,
        args: [
            '--no-sandbox',
            '--disable-setuid-sandbox',
            '--disable-dev-shm-usage',
            '--disable-accelerated-2d-canvas',
            '--no-first-run',
            '--no-zygote',
            '--disable-gpu'
        ]
    }
});

// ===================================
// üìÇ FUN√á√ïES DE ARQUIVO
// ===================================

// Carregar lista de concorrentes
async function carregarConcorrentes() {
    try {
        if (fssync.existsSync(ARQUIVO_CONCORRENTES)) {
            const data = await fs.readFile(ARQUIVO_CONCORRENTES, 'utf-8');
            const lista = JSON.parse(data);
            concorrentes = new Set(lista);
            console.log(`‚úÖ ${concorrentes.size} n√∫meros de concorrentes carregados`);
        } else {
            console.log('‚ö†Ô∏è  Arquivo de concorrentes n√£o encontrado, criando vazio...');
            await salvarConcorrentes();
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar concorrentes:', error.message);
    }
}

// Salvar lista de concorrentes
async function salvarConcorrentes() {
    try {
        await fs.writeFile(
            ARQUIVO_CONCORRENTES,
            JSON.stringify([...concorrentes], null, 2),
            'utf-8'
        );
        console.log('üíæ Lista de concorrentes salva');
    } catch (error) {
        console.error('‚ùå Erro ao salvar concorrentes:', error.message);
    }
}

// Carregar logs de detec√ß√µes
async function carregarLogs() {
    try {
        if (fssync.existsSync(ARQUIVO_LOGS)) {
            const data = await fs.readFile(ARQUIVO_LOGS, 'utf-8');
            deteccoesLog = JSON.parse(data);
            console.log(`üìã ${deteccoesLog.length} detec√ß√µes anteriores carregadas`);
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar logs:', error.message);
    }
}

// Salvar logs de detec√ß√µes
async function salvarLogs() {
    try {
        await fs.writeFile(
            ARQUIVO_LOGS,
            JSON.stringify(deteccoesLog, null, 2),
            'utf-8'
        );
    } catch (error) {
        console.error('‚ùå Erro ao salvar logs:', error.message);
    }
}

// Carregar configura√ß√µes
async function carregarConfig() {
    try {
        if (fssync.existsSync(ARQUIVO_CONFIG)) {
            const data = await fs.readFile(ARQUIVO_CONFIG, 'utf-8');
            config = { ...config, ...JSON.parse(data) };
            console.log('‚öôÔ∏è  Configura√ß√µes carregadas');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar config:', error.message);
    }
}

// Salvar configura√ß√µes
async function salvarConfig() {
    try {
        await fs.writeFile(
            ARQUIVO_CONFIG,
            JSON.stringify(config, null, 2),
            'utf-8'
        );
    } catch (error) {
        console.error('‚ùå Erro ao salvar config:', error.message);
    }
}

// ===================================
// üéØ DETECTOR DE CONCORRENTES
// ===================================

// Verificar se um n√∫mero √© concorrente
function isConcorrente(numero) {
    // Normalizar n√∫mero (remover @c.us, espa√ßos, etc)
    const numeroLimpo = numero.replace('@c.us', '').replace(/\s/g, '');
    return concorrentes.has(numeroLimpo);
}

// Adicionar concorrente
async function adicionarConcorrente(numero) {
    const numeroLimpo = numero.replace('@c.us', '').replace(/\s/g, '');
    concorrentes.add(numeroLimpo);
    await salvarConcorrentes();
    return numeroLimpo;
}

// Remover concorrente
async function removerConcorrente(numero) {
    const numeroLimpo = numero.replace('@c.us', '').replace(/\s/g, '');
    const removido = concorrentes.delete(numeroLimpo);
    if (removido) {
        await salvarConcorrentes();
    }
    return removido;
}

// Registrar detec√ß√£o
async function registrarDeteccao(grupoId, grupoNome, numeroDetectado, nomeContato, acaoTomada) {
    const deteccao = {
        timestamp: new Date().toISOString(),
        data: new Date().toLocaleString('pt-BR'),
        grupoId,
        grupoNome,
        numeroDetectado,
        nomeContato,
        acaoTomada
    };

    deteccoesLog.unshift(deteccao); // Adiciona no in√≠cio

    // Manter apenas √∫ltimas 500 detec√ß√µes
    if (deteccoesLog.length > 500) {
        deteccoesLog = deteccoesLog.slice(0, 500);
    }

    await salvarLogs();

    console.log(`\nüö® CONCORRENTE DETECTADO!`);
    console.log(`üìç Grupo: ${grupoNome}`);
    console.log(`üì± N√∫mero: ${numeroDetectado}`);
    console.log(`üë§ Nome: ${nomeContato}`);
    console.log(`‚ö° A√ß√£o: ${acaoTomada}\n`);

    return deteccao;
}

// Obter admins do grupo
async function obterAdminsGrupo(grupoId) {
    try {
        const chat = await client.getChatById(grupoId);
        if (!chat.isGroup) return [];

        const admins = chat.participants.filter(p => p.isAdmin || p.isSuperAdmin);
        return admins.map(a => a.id._serialized);
    } catch (error) {
        console.error('‚ùå Erro ao obter admins:', error.message);
        return [];
    }
}

// Notificar admins sobre concorrente detectado
async function notificarAdmins(grupoId, grupoNome, numeroDetectado, nomeContato, isAdmin = false) {
    try {
        const chat = await client.getChatById(grupoId);

        let mensagem = config.mensagemCustomizada ||
            `üö® *ALERTA DE CONCORRENTE DETECTADO!*\n\n` +
            `üìç *Grupo:* ${grupoNome}\n` +
            `üë§ *Nome:* ${nomeContato}\n` +
            `üì± *N√∫mero:* ${numeroDetectado.replace('@c.us', '')}\n` +
            `‚ö†Ô∏è *Status:* Este n√∫mero est√° na lista de vendedores concorrentes\n`;

        // Adicionar aviso especial se for admin
        if (isAdmin) {
            mensagem += `\nüëë *ATEN√á√ÉO:* Esta pessoa √© ADMINISTRADOR do grupo!\n`;
            mensagem += `üõ°Ô∏è *Prote√ß√£o ativa:* Admins N√ÉO ser√£o removidos automaticamente\n\n`;
            mensagem += `üîß *A√ß√£o recomendada:* Avaliar manualmente se deve permanecer como admin\n`;
        } else {
            mensagem += `\nüîß *A√ß√£o recomendada:* Verificar e remover se necess√°rio\n`;
        }

        mensagem += `‚è∞ *Detectado em:* ${new Date().toLocaleString('pt-BR')}`;

        if (config.notificarGrupo) {
            // Notificar no grupo
            await chat.sendMessage(mensagem);
        }

        if (config.notificarAdmins) {
            // Notificar admins por DM
            const admins = await obterAdminsGrupo(grupoId);
            for (const adminId of admins) {
                try {
                    await client.sendMessage(adminId,
                        `${mensagem}\n\n_Esta √© uma notifica√ß√£o privada de admin_`
                    );
                    await new Promise(resolve => setTimeout(resolve, 1000));
                } catch (error) {
                    console.error(`Erro ao notificar admin ${adminId}:`, error.message);
                }
            }
        }

        return true;
    } catch (error) {
        console.error('‚ùå Erro ao notificar:', error.message);
        return false;
    }
}

// Remover membro do grupo
async function removerMembroGrupo(grupoId, membroId) {
    try {
        const chat = await client.getChatById(grupoId);
        await chat.removeParticipants([membroId]);
        console.log(`‚úÖ Membro ${membroId} removido do grupo`);
        return true;
    } catch (error) {
        console.error('‚ùå Erro ao remover membro:', error.message);
        return false;
    }
}

// ===================================
// üì± EVENTOS DO WHATSAPP
// ===================================

// QR Code para autentica√ß√£o
client.on('qr', (qr) => {
    console.log('üì± Escaneie o QR Code abaixo:\n');
    qrcode.generate(qr, { small: true });
    console.log('\n');
});

// Bot pronto
client.on('ready', async () => {
    console.log('‚úÖ Bot conectado e pronto!\n');

    // Carregar dados
    await carregarConcorrentes();
    await carregarLogs();
    await carregarConfig();

    // Listar grupos
    const chats = await client.getChats();
    const grupos = chats.filter(chat => chat.isGroup);

    console.log(`\nüë• Monitorando ${grupos.length} grupos:`);
    grupos.forEach((grupo, index) => {
        console.log(`   ${index + 1}. ${grupo.name}`);
    });

    console.log('\nüîç Detector ativo! Aguardando novos membros...\n');
    console.log('üìã Comandos dispon√≠veis:');
    console.log('   .status - Status do detector');
    console.log('   .scan - Escanear membros do grupo');
    console.log('   .concorrentes - Lista de concorrentes');
    console.log('   .add <n√∫mero> - Adicionar concorrente');
    console.log('   .remove <n√∫mero> - Remover concorrente');
    console.log('   .deteccoes - Hist√≥rico de detec√ß√µes');
    console.log('   .config - Ver/alterar configura√ß√µes');
    console.log('   .ajuda - Ajuda completa\n');
});

// Detectar quando algu√©m entra no grupo
client.on('group_join', async (notification) => {
    try {
        const chat = await notification.getChat();
        const grupoId = chat.id._serialized;
        const grupoNome = chat.name;

        // IDs dos novos membros
        const novosMembroIds = notification.recipientIds || [notification.id.participant];

        for (const membroId of novosMembroIds) {
            const numeroLimpo = membroId.replace('@c.us', '');

            // Verificar se √© concorrente
            if (isConcorrente(numeroLimpo)) {
                // Verificar se √© admin do grupo (ADMINS S√ÉO ISENTOS!)
                const participante = chat.participants.find(p => p.id._serialized === membroId);
                const isAdminGrupo = participante && (participante.isAdmin || participante.isSuperAdmin);

                // Obter informa√ß√µes do contato
                let nomeContato = numeroLimpo;
                try {
                    const contato = await client.getContactById(membroId);
                    nomeContato = contato.pushname || contato.name || numeroLimpo;
                } catch (error) {
                    console.error('Erro ao obter nome do contato:', error.message);
                }

                // Notificar
                await notificarAdmins(grupoId, grupoNome, membroId, nomeContato, isAdminGrupo);

                // Remover APENAS se n√£o for admin
                let acaoTomada = 'Notifica√ß√£o enviada aos admins';

                if (isAdminGrupo) {
                    acaoTomada = '‚ö†Ô∏è Concorrente √© ADMIN - Apenas notificado (n√£o removido)';
                    console.log(`‚ö†Ô∏è ${nomeContato} √© ADMIN do grupo - N√ÉO ser√° removido`);
                } else if (config.removerAutomatico) {
                    const removido = await removerMembroGrupo(grupoId, membroId);
                    if (removido) {
                        acaoTomada = 'Removido automaticamente + Notifica√ß√£o';
                    }
                }

                // Registrar detec√ß√£o
                await registrarDeteccao(grupoId, grupoNome, membroId, nomeContato, acaoTomada);
            }
        }
    } catch (error) {
        console.error('‚ùå Erro no event group_join:', error.message);
    }
});

// Processar mensagens (comandos admin)
client.on('message', async (message) => {
    try {
        // Ignorar mensagens de status
        if (message.from === 'status@broadcast') return;

        // Apenas comandos que come√ßam com .
        if (!message.body.startsWith('.')) return;

        const chat = await message.getChat();
        const comando = message.body.toLowerCase().split(' ')[0];
        const args = message.body.split(' ').slice(1);

        // Verificar se √© admin (apenas em grupos)
        let isAdmin = false;
        if (chat.isGroup) {
            const autor = await message.getContact();
            const participant = chat.participants.find(p => p.id._serialized === autor.id._serialized);
            isAdmin = participant && (participant.isAdmin || participant.isSuperAdmin);
        } else {
            // Em DM, todos podem usar comandos
            isAdmin = true;
        }

        // ===== COMANDO: .status =====
        if (comando === '.status') {
            const chats = await client.getChats();
            const grupos = chats.filter(c => c.isGroup);

            let resposta = `üìä *STATUS DO DETECTOR*\n\n`;
            resposta += `‚úÖ Status: Ativo\n`;
            resposta += `üì± Concorrentes cadastrados: ${concorrentes.size}\n`;
            resposta += `üë• Grupos monitorados: ${grupos.length}\n`;
            resposta += `üö® Detec√ß√µes totais: ${deteccoesLog.length}\n`;
            resposta += `‚è∞ Online desde: ${new Date().toLocaleString('pt-BR')}\n\n`;
            resposta += `‚öôÔ∏è *Configura√ß√µes:*\n`;
            resposta += `   ‚Ä¢ Notificar admins: ${config.notificarAdmins ? '‚úÖ' : '‚ùå'}\n`;
            resposta += `   ‚Ä¢ Notificar grupo: ${config.notificarGrupo ? '‚úÖ' : '‚ùå'}\n`;
            resposta += `   ‚Ä¢ Remover autom√°tico: ${config.removerAutomatico ? '‚úÖ' : '‚ùå'}`;

            await message.reply(resposta);
            return;
        }

        // ===== COMANDO: .concorrentes =====
        if (comando === '.concorrentes') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (concorrentes.size === 0) {
                await message.reply('üìã Nenhum concorrente cadastrado ainda');
                return;
            }

            const lista = [...concorrentes];
            const total = lista.length;
            const limite = 50; // Mostrar apenas primeiros 50

            let resposta = `üìã *LISTA DE CONCORRENTES*\n\n`;
            resposta += `Total: ${total} n√∫meros\n\n`;

            lista.slice(0, limite).forEach((num, index) => {
                resposta += `${index + 1}. ${num}\n`;
            });

            if (total > limite) {
                resposta += `\n... e mais ${total - limite} n√∫meros\n`;
            }

            resposta += `\nüíæ Lista completa em: competitors.json`;

            await message.reply(resposta);
            return;
        }

        // ===== COMANDO: .add =====
        if (comando === '.add') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (args.length === 0) {
                await message.reply('‚ùå Uso: .add <n√∫mero>\nExemplo: .add 258841234567');
                return;
            }

            const numero = args[0].replace(/\D/g, ''); // Remove tudo que n√£o √© n√∫mero

            if (concorrentes.has(numero)) {
                await message.reply(`‚ö†Ô∏è N√∫mero ${numero} j√° est√° na lista`);
                return;
            }

            await adicionarConcorrente(numero);
            await message.reply(`‚úÖ Concorrente adicionado!\nüì± ${numero}\n\nTotal: ${concorrentes.size} n√∫meros`);
            return;
        }

        // ===== COMANDO: .remove =====
        if (comando === '.remove') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (args.length === 0) {
                await message.reply('‚ùå Uso: .remove <n√∫mero>\nExemplo: .remove 258841234567');
                return;
            }

            const numero = args[0].replace(/\D/g, '');
            const removido = await removerConcorrente(numero);

            if (removido) {
                await message.reply(`‚úÖ Concorrente removido!\nüì± ${numero}\n\nTotal: ${concorrentes.size} n√∫meros`);
            } else {
                await message.reply(`‚ö†Ô∏è N√∫mero ${numero} n√£o estava na lista`);
            }
            return;
        }

        // ===== COMANDO: .scan =====
        if (comando === '.scan') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (!chat.isGroup) {
                await message.reply('‚ùå Este comando s√≥ funciona em grupos');
                return;
            }

            await message.reply('üîç Escaneando membros do grupo...\n‚è≥ Aguarde...');

            try {
                const grupoNome = chat.name;
                const participantes = chat.participants;

                let concorrentesEncontrados = [];

                // Verificar cada participante
                for (const participante of participantes) {
                    const numeroLimpo = participante.id._serialized.replace('@c.us', '');

                    if (isConcorrente(numeroLimpo)) {
                        // Obter nome do contato
                        let nomeContato = numeroLimpo;
                        try {
                            const contato = await client.getContactById(participante.id._serialized);
                            nomeContato = contato.pushname || contato.name || numeroLimpo;
                        } catch (error) {
                            console.error('Erro ao obter nome:', error.message);
                        }

                        concorrentesEncontrados.push({
                            numero: numeroLimpo,
                            nome: nomeContato,
                            id: participante.id._serialized,
                            isAdmin: participante.isAdmin || participante.isSuperAdmin
                        });
                    }
                }

                // Preparar resposta
                let resposta = `üîç *SCAN COMPLETO*\n\n`;
                resposta += `üìç *Grupo:* ${grupoNome}\n`;
                resposta += `üë• *Total de membros:* ${participantes.length}\n`;
                resposta += `üö® *Concorrentes encontrados:* ${concorrentesEncontrados.length}\n\n`;

                if (concorrentesEncontrados.length === 0) {
                    resposta += `‚úÖ *Nenhum concorrente detectado neste grupo!*\n\n`;
                    resposta += `_Grupo limpo e seguro_ üõ°Ô∏è`;
                } else {
                    resposta += `‚ö†Ô∏è *ATEN√á√ÉO: Concorrentes detectados!*\n\n`;

                    concorrentesEncontrados.forEach((c, index) => {
                        resposta += `${index + 1}. *${c.nome}*\n`;
                        resposta += `   üì± ${c.numero}\n`;
                        resposta += `   üëë ${c.isAdmin ? '‚ö†Ô∏è ADMIN (protegido)' : 'Membro'}\n\n`;
                    });

                    resposta += `\n‚ö° *A√ß√µes recomendadas:*\n`;
                    resposta += `‚Ä¢ Verificar cada pessoa\n`;
                    resposta += `‚Ä¢ Remover membros se necess√°rio\n`;
                    resposta += `‚Ä¢ üõ°Ô∏è Admins N√ÉO ser√£o removidos automaticamente\n`;
                    resposta += `‚Ä¢ Ativar remo√ß√£o autom√°tica: .config remover on`;
                }

                await message.reply(resposta);

                // Log da varredura
                console.log(`\nüîç SCAN realizado em: ${grupoNome}`);
                console.log(`   Total membros: ${participantes.length}`);
                console.log(`   Concorrentes: ${concorrentesEncontrados.length}`);
                if (concorrentesEncontrados.length > 0) {
                    concorrentesEncontrados.forEach(c => {
                        console.log(`   - ${c.nome} (${c.numero})`);
                    });
                }

            } catch (error) {
                console.error('‚ùå Erro ao executar scan:', error.message);
                await message.reply('‚ùå Erro ao escanear grupo. Tente novamente.');
            }

            return;
        }

        // ===== COMANDO: .deteccoes =====
        if (comando === '.deteccoes' || comando === '.detecoes') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (deteccoesLog.length === 0) {
                await message.reply('üìã Nenhuma detec√ß√£o registrada ainda');
                return;
            }

            const limite = 10;
            let resposta = `üö® *HIST√ìRICO DE DETEC√á√ïES*\n\n`;
            resposta += `Total: ${deteccoesLog.length} detec√ß√µes\n\n`;

            deteccoesLog.slice(0, limite).forEach((det, index) => {
                resposta += `${index + 1}. *${det.nomeContato}*\n`;
                resposta += `   üì± ${det.numeroDetectado.replace('@c.us', '')}\n`;
                resposta += `   üìç ${det.grupoNome}\n`;
                resposta += `   ‚è∞ ${det.data}\n`;
                resposta += `   ‚ö° ${det.acaoTomada}\n\n`;
            });

            if (deteccoesLog.length > limite) {
                resposta += `... e mais ${deteccoesLog.length - limite} detec√ß√µes\n`;
            }

            resposta += `\nüíæ Log completo em: detections-log.json`;

            await message.reply(resposta);
            return;
        }

        // ===== COMANDO: .config =====
        if (comando === '.config') {
            if (!isAdmin) {
                await message.reply('‚ùå Apenas administradores podem usar este comando');
                return;
            }

            if (args.length === 0) {
                // Mostrar configura√ß√µes atuais
                let resposta = `‚öôÔ∏è *CONFIGURA√á√ïES*\n\n`;
                resposta += `1. Notificar admins (DM): ${config.notificarAdmins ? '‚úÖ' : '‚ùå'}\n`;
                resposta += `2. Notificar no grupo: ${config.notificarGrupo ? '‚úÖ' : '‚ùå'}\n`;
                resposta += `3. Remover autom√°tico: ${config.removerAutomatico ? '‚úÖ ATIVO' : '‚ùå Desativado'}\n\n`;
                resposta += `*Como alterar:*\n`;
                resposta += `.config admins on/off\n`;
                resposta += `.config grupo on/off\n`;
                resposta += `.config remover on/off`;

                await message.reply(resposta);
                return;
            }

            const opcao = args[0].toLowerCase();
            const valor = args[1]?.toLowerCase();

            if (!valor || (valor !== 'on' && valor !== 'off')) {
                await message.reply('‚ùå Uso: .config <opcao> on/off');
                return;
            }

            const ativar = valor === 'on';

            if (opcao === 'admins') {
                config.notificarAdmins = ativar;
                await salvarConfig();
                await message.reply(`‚úÖ Notifica√ß√£o para admins: ${ativar ? '‚úÖ ATIVADA' : '‚ùå Desativada'}`);
            } else if (opcao === 'grupo') {
                config.notificarGrupo = ativar;
                await salvarConfig();
                await message.reply(`‚úÖ Notifica√ß√£o no grupo: ${ativar ? '‚úÖ ATIVADA' : '‚ùå Desativada'}`);
            } else if (opcao === 'remover') {
                config.removerAutomatico = ativar;
                await salvarConfig();
                await message.reply(`‚úÖ Remo√ß√£o autom√°tica: ${ativar ? 'üî¥ ATIVADA' : '‚ùå Desativada'}\n\n${ativar ? '‚ö†Ô∏è Concorrentes ser√£o removidos automaticamente!' : ''}`);
            } else {
                await message.reply('‚ùå Op√ß√£o inv√°lida. Use: admins, grupo ou remover');
            }

            return;
        }

        // ===== COMANDO: .ajuda =====
        if (comando === '.ajuda' || comando === '.help') {
            let resposta = `ü§ñ *BOT DETECTOR DE CONCORRENTES*\n\n`;
            resposta += `*Comandos dispon√≠veis:*\n\n`;
            resposta += `üìä .status\n`;
            resposta += `   Ver status do detector\n\n`;
            resposta += `üîç .scan\n`;
            resposta += `   Escanear membros atuais do grupo\n\n`;
            resposta += `üìã .concorrentes\n`;
            resposta += `   Listar concorrentes cadastrados\n\n`;
            resposta += `‚ûï .add <n√∫mero>\n`;
            resposta += `   Adicionar concorrente √† lista\n\n`;
            resposta += `‚ûñ .remove <n√∫mero>\n`;
            resposta += `   Remover concorrente da lista\n\n`;
            resposta += `üö® .deteccoes\n`;
            resposta += `   Ver hist√≥rico de detec√ß√µes\n\n`;
            resposta += `‚öôÔ∏è .config [opcao] [on/off]\n`;
            resposta += `   Configurar comportamento\n\n`;
            resposta += `‚ùì .ajuda\n`;
            resposta += `   Mostrar esta ajuda\n\n`;
            resposta += `*Como funciona:*\n`;
            resposta += `O bot monitora todos os grupos e detecta automaticamente quando um n√∫mero da lista de concorrentes entra em algum grupo.`;

            await message.reply(resposta);
            return;
        }

    } catch (error) {
        console.error('‚ùå Erro ao processar mensagem:', error.message);
    }
});

// Erro de autentica√ß√£o
client.on('auth_failure', (msg) => {
    console.error('‚ùå Falha na autentica√ß√£o:', msg);
});

// Desconex√£o
client.on('disconnected', (reason) => {
    console.log('‚ö†Ô∏è  Bot desconectado:', reason);
});

// ===================================
// üöÄ INICIALIZAR BOT
// ===================================

client.initialize();

// Tratamento de erros n√£o capturados
process.on('unhandledRejection', (error) => {
    console.error('‚ùå Erro n√£o tratado:', error);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Exce√ß√£o n√£o capturada:', error);
});

// Graceful shutdown
process.on('SIGINT', async () => {
    console.log('\nüõë Encerrando bot...');
    await client.destroy();
    process.exit(0);
});
